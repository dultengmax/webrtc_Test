# nginx.conf

# Blok server untuk menangani permintaan HTTP (port 80).
# Ini akan mengarahkan semua lalu lintas HTTP ke HTTPS.
server {
    listen 80;
    listen [::]:80;
    # server_name yourdomain.com www.yourdomain.com; # Coolify akan mengelola ini secara otomatis
    return 301 https://$host$request_uri; # Redirect permanen dari HTTP ke HTTPS
}

# Blok server untuk menangani permintaan HTTPS (port 443).
server {
    listen 443 ssl http2; # Nginx mendengarkan di port 443 dengan SSL dan HTTP/2 diaktifkan
    listen [::]:443 ssl http2;
    # server_name yourdomain.com www.yourdomain.com; # Coolify akan mengelola ini secara otomatis

    # Konfigurasi SSL akan disuntikkan secara otomatis oleh Coolify.
    # Anda tidak perlu menempatkan path sertifikat di sini.
    # Contoh baris yang akan disuntikkan Coolify (HANYA UNTUK REFERENSI):
    # ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Lokasi root untuk file-file statis frontend.
    # Ini akan menyajikan index.html dan client.js dari folder 'public' di dalam container.
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ =404; # Mencoba melayani file, jika tidak ada, tampilkan 404
    }

    # Konfigurasi reverse proxy untuk WebSocket signaling server.
    # Semua permintaan ke /ws/ akan diteruskan ke service 'backend' di port 8080.
    location /ws/ {
        # 'backend' adalah nama service yang didefinisikan di docker-compose.yml.
        # Komunikasi dari Nginx ke container backend adalah HTTP (tidak terenkripsi)
        # karena terjadi di dalam jaringan Docker yang aman.
        proxy_pass http://backend:8080;
        
        # Header penting untuk meng-upgrade koneksi dari HTTP ke WebSocket.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Meneruskan Host header asli.
        proxy_set_header Host $host;
        
        # Mengatur timeout untuk koneksi WebSocket yang mungkin berlangsung lama.
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Bypass cache untuk koneksi upgrade.
        proxy_cache_bypass $http_upgrade;
    }
}
